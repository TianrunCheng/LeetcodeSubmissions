{"id":359680666,"lang":"python3","time":"1Â year","timestamp":1593404597,"status_display":"Accepted","runtime":"1000 ms","url":"/submissions/detail/359680666/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"14.3 MB","code":"class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # total number of substrings possible: n^2, checking if a substring has repeating chars: n\n        # simple enumeration gives O(n^3) algorithm\n        # how can we make it faster?\n        # each position as a staring point for substring has its unique longest-sub-without-repeat\n        \n        # or is it an O(n) problem cause the biggest possible substring cannot exceed the number of chars?\n        n = len(s) \n        l = 1 # current longest \n        if len(s) == 0:\n            return 0\n                    # 'a':0,\n                    # 'b':0,\n                    # 'c':0,\n                    # 'd':0,\n                    # 'e':0,\n                    # 'f':0,\n                    # 'g':0,\n                    # 'h':0,\n                    # 'i':0,\n                    # 'j':0,\n                    # 'k':0,\n                    # 'l':0,\n                    # 'm':0,\n                    # 'n':0,\n                    # 'o':0,\n                    # 'p':0,\n                    # 'q':0,\n                    # 'r':0,\n                    # 's':0,\n                    # 't':0,\n                    # 'u':0,\n                    # 'v':0,\n                    # 'w':0,\n                    # 'x':0,\n                    # 'y':0,\n                    # 'z':0\n        \n        for c in range(len(s)):\n            if (n-c) <= l:\n                return l\n            else:\n                Dict = {}\n                Dict[s[c]] = 1\n                curr_l = 1\n                for i in range(c+1, n):\n                    if s[i] not in Dict:\n                        Dict[s[i]] = 1\n                        curr_l = i-c+1\n                        l = max(curr_l, l)\n                    else:\n                        print(curr_l)\n                        l = max(curr_l, l)\n                        break\n        \n        return l\n                    \n        ","compare_resulttitle_slug":"longest-substring-without-repeating-characters"}