{"id":359686201,"lang":"python3","time":"1Â year","timestamp":1593405685,"status_display":"Accepted","runtime":"1008 ms","url":"/submissions/detail/359686201/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"14.4 MB","code":"class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        # total number of substrings possible: n^2, checking if a substring has repeating chars: n\n        # simple enumeration gives O(n^3) algorithm\n        # how can we make it faster?\n        # each position as a staring point for substring has its unique longest-sub-without-repeat\n        \n        # or is it an O(n) problem cause the biggest possible substring cannot exceed the number of chars?\n\n# '''First successful submission, speed 6%'''\n#         n = len(s) \n#         l = 1 # current longest \n#         if len(s) == 0:\n#             return 0\n#                     # 'a':0,\n#                     # 'b':0,\n#                     # 'c':0,\n#                     #  ...\n#                     # 'z':0\n        \n#         for c in range(len(s)):\n#             if (n-c) <= l:\n#                 return l\n#             else:\n#                 Dict={}\n#                 Dict[s[c]] = 1\n#                 curr_l = 1\n#                 for i in range(c+1, n):\n#                     if s[i] not in Dict:\n#                         Dict[s[i]] = 1\n#                         curr_l = i-c+1\n#                         l = max(curr_l, l)\n#                     else:\n#                         print(curr_l)\n#                         l = max(curr_l, l)\n#                         break\n        \n#         return l\n                    \n        n = len(s) \n        l = 1 # current longest \n        if len(s) == 0:\n            return 0\n                    # 'a':0,\n                    # 'b':0,\n                    # 'c':0,\n                    #  ...\n                    # 'z':0\n        \n        for c in range(len(s)):\n            if (n-c) <= l:\n                return l\n            else:\n                fSet = set()\n                fSet.add(s[c])\n                curr_l = 1\n                for i in range(c+1, n):\n                    if s[i] not in fSet:\n                        fSet.add(s[i])\n                        curr_l = i-c+1\n                        l = max(curr_l, l)\n                    else:\n                        print(curr_l)\n                        l = max(curr_l, l)\n                        break\n        \n        return l","compare_resulttitle_slug":"longest-substring-without-repeating-characters"}