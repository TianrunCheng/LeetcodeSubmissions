{"id":515600787,"lang":"python3","time":"3Â weeks","timestamp":1625098049,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/515600787/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"14.4 MB","code":"class MyQueue:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.__store = []\n        self.__cache = []\n        self.__size = 0\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        self.__store.append(x)\n        self.__size += 1\n        \n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        if self.empty():\n            return -1\n        if len(self.__cache) > 0:\n            self.__size -= 1\n            return self.__cache.pop()\n        else:\n            for i in range(self.__size):\n                temp = self.__store.pop()\n                self.__cache.append(temp)\n            self.__store = []\n            self.__size -= 1\n            return self.__cache.pop()\n        \n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        if self.empty():\n            return -1\n        if len(self.__cache) > 0:\n            return self.__cache[-1]\n        else:\n            for i in range(self.__size):\n                temp = self.__store.pop()\n                self.__cache.append(temp)\n            self.__store = []\n            return self.__cache[-1]\n        \n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return self.__size == 0\n        \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()","compare_result":"11111111111111111111","title_slug":"implement-queue-using-stacks"}