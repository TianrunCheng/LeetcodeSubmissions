{"id":517912112,"lang":"python3","time":"2 weeks, 2 days","timestamp":1625517321,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/517912112/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"17.3 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        if head == None:\n            return None\n        \n        slow = head\n        fast = head\n        cycle = False\n        \n        while(fast != None and fast.next != None):\n            slow = slow.next\n            fast = fast.next.next\n            if fast == slow:\n                intersect = slow\n                cycle = True\n                break\n        \n        if not cycle:\n            return None\n        \n        fast = head\n        slow = intersect\n        while(fast != slow):\n            fast = fast.next\n            slow = slow.next\n            \n        return slow","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}