{"id":514690265,"lang":"python3","time":"3 weeks, 1 day","timestamp":1624936068,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/514690265/","is_pending":"Not Pending","title":"Clone Graph","memory":"14.6 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if node is None:\n            return None\n        seen = {}\n        root = Node(1)\n        seen[root.val] = root\n        \n        def printNeighbors(node: 'Node'):\n            count = 0\n            for neighbor in node.neighbors:\n                count += 1\n                print(\"neighbor \" + str(count) + \": \" + str(neighbor.val))\n        \n        def traverse(node: 'Node', copy: 'Node', seen: dict):\n            # print(copy.val)\n            # printNeighbors(copy)\n            # print(seen)\n            for neighbor in node.neighbors:\n                if neighbor.val not in seen:\n                    temp = Node(neighbor.val)\n                    seen[neighbor.val] = temp\n                    copy.neighbors.append(temp)\n                    traverse(neighbor, temp, seen)\n                else:\n                    temp = seen[neighbor.val]\n                    copy.neighbors.append(temp)\n                    \n        traverse(node, root, seen)\n        # printNeighbors(root)\n        # printNeighbors(root.neighbors[0])\n        return root\n                    ","compare_result":"1111111111111111111111","title_slug":"clone-graph"}