{"id":515606305,"lang":"python3","time":"3Â weeks","timestamp":1625099416,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/515606305/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"14.2 MB","code":"from collections import deque\n\nclass MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.__queue = deque()\n        self.__size = 0\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        self.__queue.append(x)\n        self.__size += 1\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        if self.empty():\n            return -1\n        for i in range(self.__size - 1):\n            temp = self.__queue.popleft()\n            self.__queue.append(temp)\n        self.__size -= 1\n        return self.__queue.popleft()\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        if self.empty():\n            return -1\n        for i in range(self.__size):\n            temp = self.__queue.popleft()\n            self.__queue.append(temp)\n        return temp\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return self.__size == 0\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()","compare_result":"1111111111111111","title_slug":"implement-stack-using-queues"}