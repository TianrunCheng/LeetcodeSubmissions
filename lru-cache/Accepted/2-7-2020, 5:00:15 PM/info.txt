{"id":301155960,"lang":"python3","time":"1 year, 5 months","timestamp":1581112815,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/301155960/","is_pending":"Not Pending","title":"LRU Cache","memory":"22.6 MB","code":"'''solution using ordered dictionary of python'''\n# import collections\n# class LRUCache(collections.OrderedDict):\n\n#     def __init__(self, capacity: int):\n#         self.size = capacity\n\n#     def get(self, key: int) -> int:\n#         if key not in self:\n#             return -1\n#         else:\n#             self.move_to_end(key)\n#             return self[key]\n\n#     def put(self, key: int, value: int) -> None:\n#         self[key] = value\n#         self.move_to_end(key)\n#         if len(self) > self.size:\n#             self.popitem(last=False)\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)\n\nclass DLNode:\n    \n    def __init__(self):\n        self.value = 0\n        self.key = 0\n        self.left = None\n        self.right = None\n\nclass LRUCache:\n    \n    def __init__(self, max_size):\n        self.dict = {}\n        self.max_size = max_size\n        self.size = 0\n        self.head = DLNode()\n        self.tail = DLNode()\n        self.head.right = self.tail\n        self.tail.left = self.head\n    \n    def push_to_head(self, node):\n        node.left = self.head\n        self.head.right.left = node\n        node.right = self.head.right\n        self.head.right = node\n    \n    def move_to_head(self, node):\n        node.left.right = node.right\n        node.right.left = node.left\n        \n        node.right = self.head.right\n        self.head.right = node\n        node.left = self.head\n        node.right.left = node\n        \n    def pop_tail(self):\n        key = self.tail.left.key\n        self.tail.left = self.tail.left.left\n        self.tail.left.right = self.tail\n        del self.dict[key]\n    \n    def get(self,key):\n        if key in self.dict:\n            val = self.dict[key].value\n            self.move_to_head(self.dict[key])\n            return val\n        else:\n            return -1\n    \n    def put(self, key, value):\n        if key in self.dict:\n            self.dict[key].value = value\n            self.move_to_head(self.dict[key])\n        elif self.size < self.max_size:\n            self.size += 1\n            self.dict[key] = DLNode()\n            self.dict[key].value = value\n            self.dict[key].key = key\n            self.push_to_head(self.dict[key])\n        else:\n            self.pop_tail()\n            self.dict[key] = DLNode()\n            self.dict[key].value = value\n            self.dict[key].key = key\n            self.push_to_head(self.dict[key])\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        ","compare_result":"111111111111111111","title_slug":"lru-cache"}