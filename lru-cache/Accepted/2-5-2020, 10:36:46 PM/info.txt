{"id":300655541,"lang":"python3","time":"1 year, 5 months","timestamp":1580960206,"status_display":"Accepted","runtime":"172 ms","url":"/submissions/detail/300655541/","is_pending":"Not Pending","title":"LRU Cache","memory":"22 MB","code":"import collections\nclass LRUCache(collections.OrderedDict):\n\n    def __init__(self, capacity: int):\n        self.size = capacity\n\n    def get(self, key: int) -> int:\n        if key not in self:\n            return -1\n        else:\n            self.move_to_end(key)\n            return self[key]\n\n    def put(self, key: int, value: int) -> None:\n        self[key] = value\n        self.move_to_end(key)\n        if len(self) > self.size:\n            self.popitem(last=False)\n\n\n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"111111111111111111","title_slug":"lru-cache"}