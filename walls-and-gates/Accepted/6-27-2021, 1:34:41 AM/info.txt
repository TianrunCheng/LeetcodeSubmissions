{"id":513782903,"lang":"python3","time":"3Â weeks, 3Â days","timestamp":1624772081,"status_display":"Accepted","runtime":"272 ms","url":"/submissions/detail/513782903/","is_pending":"Not Pending","title":"Walls and Gates","memory":"17 MB","code":"from collections import deque\n\nclass Solution:\n    def wallsAndGates(self, rooms: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        inf = 2 ** 31 - 1\n        dq = deque()\n        m = len(rooms)\n        n = len(rooms[0])\n        \n        gates = []\n        for i in range(m):\n            for j in range(n):\n                if rooms[i][j] == 0:\n                    gates.append((i, j))\n        \n        # print(gates)\n        \n        for gate in gates:\n            i = gate[0]\n            j = gate[1]\n            step = 0\n            dq.append((i, j))\n            while(len(dq) > 0):\n                # print(rooms)\n                # print(dq)\n                step += 1\n                for i in range(len(dq)):\n                    curr = dq.popleft()\n                    i = curr[0]; j = curr[1]\n\n                    if i > 0 and rooms[i-1][j] > step:\n                        rooms[i-1][j] = step\n                        dq.append((i-1, j))\n                    if j > 0 and rooms[i][j-1] > step:\n                        rooms[i][j-1] = step\n                        dq.append((i, j-1))\n                    if i < (m-1) and rooms[i+1][j] > step:\n                        rooms[i+1][j] = step\n                        dq.append((i+1, j))\n                    if j < (n-1) and rooms[i][j+1] > step:\n                        rooms[i][j+1] = step\n                        dq.append((i, j+1))\n        return","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates"}