{"id":520067599,"lang":"python3","time":"1 week, 4 days","timestamp":1625887059,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/520067599/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidBST(self, root: TreeNode) -> bool:\n        self.valid = True\n        # define a helper function, returning min and max of each subtree\n        \n        def checkSubTree(root: TreeNode) -> (int, int):\n            # return (min_val, max_val)\n            if not self.valid:\n                # no need to check anything, tree is invalid\n                return (0, 0)\n            \n            res = [root.val, root.val]\n            if not root.left and not root.right:\n                # no branches, we've reached a leaf\n                return (res[0], res[1])\n            if root.left:\n                l_min, l_max = checkSubTree(root.left)\n                if l_max > root.val:\n                    self.valid = False\n                    return (0,0)\n                res[0] = l_min\n            if root.right:\n                r_min, r_max = checkSubTree(root.right)\n                if r_min < root.val:\n                    self.valid = False\n                    return (0, 0)\n                res[1] = r_max\n            return (res[0], res[1])\n        \n        checkSubTree(root)\n        \n        return self.valid\n                ","compare_result":"11110001111111111011111111111111111111110111111111111111101111000011111111111001","title_slug":"validate-binary-search-tree"}