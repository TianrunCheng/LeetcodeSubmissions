{"id":297954883,"lang":"python3","time":"1Â year, 5Â months","timestamp":1580161958,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/297954883/","is_pending":"Not Pending","title":"Combination Sum","memory":"12.9 MB","code":"import math\n# sort the set in descendent order [big->small]\n# divide and conquer, for each candidate number, create i=1~floor(tar_curr/candi_curr) recurrent problems:\n# sub_problem candidates being list of nums afer candi_curr and tar_curr = tar_curr - i*candi_curr\n# boundary: len(candi_list) == 1, if target_current == some_int*candi_curr, return set[[candi_curr*some_int]]\n# i_th resulting set = add i*candi_curr to each entrie of the subproblem return set\n# resulting set: merge all floor(tar_curr/candi_curr) resulting sets into one set of number sequences\n\nclass Solution:\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\n        dp = [[] for _ in range(target + 1)]\n        dp[0] = [[]]\n        for n in candidates:\n            for i in range(n, target + 1):\n                for nei in dp[i - n]:\n                    dp[i].append(nei + [n])\n        return dp[-1]\n#         candidates.sort(reverse = True)\n#         # ans = []\n        \n#         def fn(candi, target) -> [[int]]:\n#             if target == 0:\n#                 return [[]]\n#             elif len(candi) == 1:\n#                 if target % candi[0] == 0:\n#                     ans = [[]]\n#                     for _ in range(math.floor(target / candi[0])):\n#                         ans[0].append(candi[0])\n#                     return ans\n#                 else:\n#                     return [[]]\n#             else:\n#                 ans = [[]]\n#                 for i in range(math.floor(target / candi[0])+1):\n#                     sub_ans = fn(candi[1:], target - i * candi[0])\n#                     # print(sub_ans)\n#                     if sub_ans != [[]]:\n#                         # print(sub_ans)\n#                         for seq in sub_ans:\n#                             for _ in range(i):\n#                                 seq.append(candi[0])\n#                             ans.append(seq)\n#                     elif target == candi[0] * i:\n#                         ans.append([])\n#                         for _ in range(i):\n#                             ans[-1].append(candi[0])\n#                 ans.pop(0)\n     \n#                 return ans\n\n#         ans = fn(candidates, target)\n#         if ans==[[]]:\n#             return []\n#         else:\n#             return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum"}