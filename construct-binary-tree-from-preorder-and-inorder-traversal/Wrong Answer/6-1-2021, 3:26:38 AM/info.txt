{"id":501247248,"lang":"python3","time":"1 month, 2 weeks","timestamp":1622532398,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/501247248/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> TreeNode:\n        if len(preorder) == 0:\n            return None\n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        \n        val = preorder[0]\n        root = TreeNode(val)\n        cut = inorder.index(val)\n        root.left = self.buildTree(preorder[1:cut], inorder[:cut])\n        root.right = self.buildTree(preorder[cut+1:], inorder[cut+1:])\n        \n        return root","compare_result":"0101000101000000000000001000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}