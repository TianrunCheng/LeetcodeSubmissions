{"id":279628984,"lang":"python3","time":"1 year, 8 months","timestamp":1574026838,"status_display":"Accepted","runtime":"224 ms","url":"/submissions/detail/279628984/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"13.8 MB","code":"class Solution:\n    \n    def leetcode84(self, heights):\n        n = len(heights)\n        if n == 0:\n            return 0\n        \n        heights.append(0)\n        stack = [-1]\n        maxarea = 0\n        for i in range(n):\n            if heights[i] >= heights[stack[-1]]:\n                stack.append(i)\n            else:\n                curr = heights[i]\n                while heights[stack[-1]] > curr:\n                    h = heights[stack.pop(-1)]\n                    w = i - stack[-1] - 1\n                    maxarea = max(maxarea, h * w)\n                stack.append(i)\n        while stack[-1] != -1:\n            h = heights[stack.pop(-1)]\n            w = n - stack[-1] - 1\n            maxarea = max(maxarea, h * w)\n        \n        return maxarea\n    \n    \n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        \n        if not matrix:\n            return 0\n        \n        maxarea = 0\n        dp = [0] * len(matrix[0])\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if matrix[i][j] == '1':\n                    dp[j] += 1\n                else:\n                    dp[j] = 0\n            \n            maxarea = max(maxarea, self.leetcode84(dp))\n        \n        return maxarea\n    ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}