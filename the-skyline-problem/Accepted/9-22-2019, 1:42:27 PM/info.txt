{"id":263217713,"lang":"python3","time":"1 year, 10 months","timestamp":1569174147,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/263217713/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"18.8 MB","code":"class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n            edge = []\n            hdict = collections.defaultdict(int)\n            maxheap = []\n\n            for s, e, h in buildings:\n                edge.append((s, -1, h))\n                edge.append((e, 1, h))\n            edge.sort()\n            #print edge\n            ans = []\n            for x, t, h in edge:\n                if t == -1:\n                    heapq.heappush(maxheap, -h)\n                    hdict[h] += 1\n                    while hdict[-maxheap[0]] == 0:\n                        heapq.heappop(maxheap)\n                    curH = -maxheap[0]\n                    if curH == h and hdict[h] == 1:\n                        point = [x, h]\n                        if ans and ans[-1][0] == x:\n                            point = max(point, ans.pop())\n                        ans.append(point)\n                else:\n                    hdict[h] -= 1\n                    while maxheap and hdict[-maxheap[0]] == 0:\n                        heapq.heappop(maxheap)\n                    curH = -maxheap[0] if maxheap else 0\n                    if curH < h:\n                        ans.append([x, curH])\n            return ans\n        ","compare_result":"111111111111111111111111111111111111","title_slug":"the-skyline-problem"}