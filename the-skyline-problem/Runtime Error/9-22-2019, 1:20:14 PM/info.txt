{"id":263212177,"lang":"python3","time":"1 year, 10 months","timestamp":1569172814,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/263212177/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"N/A","code":"class Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        \n        \n        def merge(leftSky: list, rightSky: list) -> list:\n            highSky = [[0, 0]]\n            ll = len(leftSky)\n            rl = len(rightSky)\n            leftHeight = [0] * (ll + rl + 1)\n            rightHeight = [0] * (ll + rl + 1)\n            height = [0] * (ll + rl + 1)\n            tempX = [0] * (ll + rl + 1)\n            lp = 0\n            r = 0\n            for i in range(1, ll + rl + 1):\n                if lp < ll and r < rl:\n                    if leftSky[lp][0] == rightSky[r][0]:\n                        tempX[i] = leftSky[lp][0]\n                        height[i] = max(leftSky[lp][1], rightSky[r][1])\n                        leftHeight[i] = leftSky[lp][1]\n                        rightHeight[i] = rightSky[r][1]\n                        lp += 1\n                        r += 1\n                        i += 1\n                    elif leftSky[lp][0] < rightSky[r][0]:\n                        tempX[i] = leftSky[lp][0]\n                        leftHeight[i] = leftSky[lp][1]\n                        rightHeight[i] = rightHeight[i - 1]\n                        height[i] = max(leftHeight[i], rightHeight[i])\n                        lp += 1\n                        i += 1\n                    else:\n                        tempX[i] = rightSky[r][0]\n                        rightHeight[i] = rightSky[r][1]\n                        leftHeight[i] = leftHeight[i - 1]\n                        height[i] = max(leftHeight[i], rightHeight[i])\n                        r += 1\n                        i += 1\n                elif lp == ll:\n                    tempX[i] = rightSky[r][0]\n                    rightHeight[i] = rightSky[r][1]\n                    leftHeight[i] = leftHeight[i - 1]\n                    height[i] = max(leftHeight[i], rightHeight[i])\n                    r += 1\n                    i += 1\n                else:\n                    tempX[i] = leftSky[lp][0]\n                    leftHeight[i] = leftSky[lp][1]\n                    rightHeight[i] = rightHeight[i - 1]\n                    height[i] = max(leftHeight[i], rightHeight[i])\n                    lp += 1\n                    i += 1\n\n            for i in range(1, ll + rl + 1):\n                if height[i] != height[i - 1]:\n                    highSky.append([tempX[i], height[i]])\n                i += 1\n            highSky.pop(0)\n            return highSky\n\n\n        n = len(buildings)\n        skyLines = [[[0, 0], [0, 0]]]\n        for i in range(0, n):\n            skyLines.append([[buildings[i][0], buildings[i][2]], [buildings[i][1], 0]])\n        skyLines.pop(0)\n\n        i = 0\n        while len(skyLines) > 1:\n            i = 0\n            while i <= len(skyLines) - 2:\n                skyLines[i] = merge(skyLines[i], skyLines[i + 1])\n                skyLines.pop(i + 1)\n                i += 1\n\n        if len(skyLines) > 0:\n            return skyLines[0]\n        else:\n            return []\n","compare_result":"111100000000000000000000000000000000","title_slug":"the-skyline-problem"}