{"id":517941513,"lang":"python3","time":"2 weeks, 2 days","timestamp":1625522403,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/517941513/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"29.1 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n        pA = headA\n        pB = headB\n        \n        while pA != pB:\n            # if pA == None:\n            #     pA = headB\n            # else:\n            #     pA = pA.next\n            # if pB== None:\n            #     pB = headA\n            # else:\n            #     pB = pB.next\n            pA = headB if pA is None else pA.next\n            pB = headA if pB is None else pB.next\n        \n        return pA\n        \n        \n#         m = 0\n#         ptr1 = headA\n#         while ptr1 != None:\n#             m += 1\n#             ptr1 = ptr1.next\n        \n#         n = 0\n#         ptr2 = headB\n#         while ptr2 != None:\n#             n += 1\n#             ptr2 = ptr2.next\n            \n#         ptr1 = headA\n#         ptr2 = headB\n#         if m > n:\n#             for _ in range(m - n):\n#                 ptr1 = ptr1.next\n#             while(ptr1 != None):\n#                 if ptr1 == ptr2:\n#                     return ptr1\n#                 ptr1 = ptr1.next\n#                 ptr2 = ptr2.next\n#             return None\n#         else:\n#             for _ in range(n - m):\n#                 ptr2 = ptr2.next\n#             while(ptr1 != None):\n#                 if ptr1 == ptr2:\n#                     return ptr1\n#                 ptr1 = ptr1.next\n#                 ptr2 = ptr2.next\n#             return None","compare_result":"111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists"}