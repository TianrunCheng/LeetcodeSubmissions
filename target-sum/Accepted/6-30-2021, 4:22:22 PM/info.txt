{"id":515542347,"lang":"python3","time":"3Â weeks","timestamp":1625084542,"status_display":"Accepted","runtime":"1112 ms","url":"/submissions/detail/515542347/","is_pending":"Not Pending","title":"Target Sum","memory":"14.3 MB","code":"class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        # didn't do this problem, asked Qi for answers\n        # notice 0 <= sum(nums[i]) <= 1000, meaning the possible sums induced\n        #   from adding \"+\"/\"-\" before each num is within range(-1000, 1001)\n        #   calculate all possibilities using dynamic programming\n        \n        dp = [0] * 2001\n        dp[1000] = 1\n        # dp_i:= [-1000, ..., 0, ..., 1000]\n        # update the array \"dp\" 20 rounds\n        # the i_th round: dp[j-1000] \n        #   meaning ways of summing up to (j-1000) using the first i nums\n        \n        for num in nums:\n            temp_plus = [0] * 2001\n            temp_minus = [0] * 2001\n            for i in range(num, 2001):\n                temp_plus[i] = dp[i-num]\n            for i in range(0, 2001 - num):\n                temp_minus[i] = dp[i+num]\n            for i in range(2001):\n                dp[i] = temp_plus[i] + temp_minus[i]\n        \n        return dp[target+1000]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum"}