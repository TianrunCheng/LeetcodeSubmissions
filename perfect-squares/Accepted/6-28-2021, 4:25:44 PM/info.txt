{"id":514574673,"lang":"python3","time":"3 weeks, 2 days","timestamp":1624911944,"status_display":"Accepted","runtime":"1692 ms","url":"/submissions/detail/514574673/","is_pending":"Not Pending","title":"Perfect Squares","memory":"17.4 MB","code":"from collections import deque\n\nclass Solution:\n    def numSquares(self, n: int) -> int:\n        # construct a list of all perfect squares smaller than n\n        squares = []\n        queue = deque()\n        # queue of all reachable numbers with \"step\" adding of squares\n        seen = set()\n        # all seen numbers\n        for i in range(1, n+1):\n            sq = i * i\n            if sq <= n:\n                squares.append(sq)\n                queue.append(sq)\n                seen.add(sq)\n            else:\n                break\n        \n        step = 0\n        while(True):\n            step += 1\n            size = len(queue)\n            for i in range(size):\n                curr = queue.popleft()\n                if curr == n:\n                    return step\n                for sq in squares:\n                    p = curr + sq\n                    if p not in seen:\n                        seen.add(p)\n                        queue.append(p)\n        \n                ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"perfect-squares"}