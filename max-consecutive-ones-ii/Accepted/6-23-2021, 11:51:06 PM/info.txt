{"id":512368445,"lang":"python3","time":"3 weeks, 6 days","timestamp":1624506666,"status_display":"Accepted","runtime":"424 ms","url":"/submissions/detail/512368445/","is_pending":"Not Pending","title":"Max Consecutive Ones II","memory":"14.4 MB","code":"class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        # sliding window re-implement\n        l = r = 0\n        count_zeros = 0\n        res = 0\n        \n        while(r < len(nums)):\n            if nums[r] == 0:\n                count_zeros += 1\n            # print(nums[l:(r+1)])\n                \n            if count_zeros == 2:\n                while(l < r and nums[l] == 1):\n                    l += 1\n                    # print(nums[l:(r+1)])\n                l += 1\n                count_zeros -= 1\n                # print(nums[l:(r+1)])\n            \n            res = max(res, r - l + 1)\n            \n            r += 1\n        \n        return res\n        \n        \n        \n        \n        \n#         # this solution features a finite-state-machine\n#         # remembering some states while looking at one element a time in the stream\n\n\n#         in_stream = False\n#         # are we currently in a \"1\" stream\n#         curr_stream = 0\n#         # length of the current \"1\" stream\n#         res = 0\n#         # best result till now\n#         last_stream = 0\n#         # length of last \"1\" stream separated by at most 1 \"0\"\n#         has_zero_before = False\n#         # does this stream of \"1\" has at least one \"0\" before it?\n        \n#         if nums[0] == 1:\n#             in_stream = True\n#             curr_stream = 1\n#             res = 1\n#         else:\n#             has_zero_before = True\n            \n#         for i in range(1, len(nums)):\n#             # print(in_stream)\n#             # print(curr_stream)\n#             # print(last_stream)\n#             if in_stream:\n#                 # the last num is \"1\"\n#                 if nums[i] == 0:\n#                     in_stream = False\n#                     last_stream = curr_stream\n#                     res = max(res, last_stream + 1)\n#                     # this \"0\" added to last stream is the longest valid sequence ending in the current index i\n#                     curr_stream = 0\n#                     has_zero_before = True\n#                 else:\n#                     curr_stream += 1\n#                     if has_zero_before:\n#                         res = max(res, curr_stream + last_stream + 1)\n#                     else:\n#                         res = max(res, curr_stream)\n#             else:\n#                 if nums[i] == 0:\n#                     last_stream = 0\n                    \n#                 else:\n#                     in_stream = True\n#                     curr_stream = 1\n#                     if has_zero_before:\n#                         res = max(res, curr_stream + last_stream + 1)\n        \n#         res = max(res, 1)\n        \n#         return res\n                    \n                    \n                    \n                    ","compare_result":"111111111111111111111111111111111111111111","title_slug":"max-consecutive-ones-ii"}