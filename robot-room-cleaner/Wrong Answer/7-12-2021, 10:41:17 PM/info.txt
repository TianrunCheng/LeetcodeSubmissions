{"id":521631724,"lang":"python3","time":"1 week, 1 day","timestamp":1626144077,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/521631724/","is_pending":"Not Pending","title":"Robot Room Cleaner","memory":"N/A","code":"# \"\"\"\n# This is the robot's control interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class Robot:\n#    def move(self):\n#        \"\"\"\n#        Returns true if the cell in front is open and robot moves into the cell.\n#        Returns false if the cell in front is blocked and robot stays in the current cell.\n#        :rtype bool\n#        \"\"\"\n#\n#    def turnLeft(self):\n#        \"\"\"\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\n#        Each turn will be 90 degrees.\n#        :rtype void\n#        \"\"\"\n#\n#    def turnRight(self):\n#        \"\"\"\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\n#        Each turn will be 90 degrees.\n#        :rtype void\n#        \"\"\"\n#\n#    def clean(self):\n#        \"\"\"\n#        Clean the current cell.\n#        :rtype void\n#        \"\"\"\n\nclass Solution:\n\n    def cleanRoom(self, robot):\n        \"\"\"\n        :type robot: Robot\n        :rtype: None\n        \"\"\"\n        self.cleaned = set()\n        self.curr = (0, 0)\n        self.direction = 0\n        # starting pos: (0, 0), facing up\n        # up: 0, left: 1, down: 2, right: 3\n        \n        # def turnRobot(robot, end_dir):\n        #     l = (end_dir - self.direction) % 4\n        #     for _ in range():\n        #         robot.turnLeft()\n        \n        def posTowardDirection():\n            if self.direction == 0:\n                return (self.curr[0], self.curr[1] + 1)\n            elif self.direction == 1:\n                return (self.curr[0] - 1, self.curr[1])\n            elif self.direction == 2:\n                return (self.curr[0], self.curr[1] - 1)\n            else:\n                return (self.curr[0] + 1, self.curr[1])\n        \n        def track(robot):\n            # print(self.direction)\n            # print(self.curr)\n            # print()\n            robot.clean()\n            self.cleaned.add(self.curr)\n            \n            robot.turnLeft()\n            self.direction = (self.direction + 1) % 4\n            for _ in range(3):\n                row, col = posTowardDirection()\n                if (row, col) not in self.cleaned and robot.move():\n                    self.curr = (row, col)\n                    track(robot)\n                    robot.turnLeft()\n                    self.direction = (self.direction + 1) % 4\n                else:\n                    robot.turnRight()\n                    self.direction = (self.direction - 1) % 4\n            \n            self.curr = posTowardDirection()\n            robot.move()\n            return\n        \n        track(robot)\n        \n                \n            \n        \n        \n        ","compare_result":"11011100111011011101111111111","title_slug":"robot-room-cleaner"}