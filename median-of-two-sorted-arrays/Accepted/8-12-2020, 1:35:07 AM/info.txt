{"id":379723251,"lang":"java","time":"11 months, 1 week","timestamp":1597210507,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/379723251/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"40.7 MB","code":"class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        if(nums1.length > nums2.length) {\n            int[] temp = nums1;\n            nums1 = nums2;\n            nums2 = temp;\n        } // let nums1 be the smaller array\n\n        int start1 = -1;\n        int end1 = nums1.length - 1;\n        if(end1 == -1) { // If the first array is empty\n            if((nums1.length+nums2.length)%2==0){\n                // If it is the true cut for a even total array\n                return ((double) (nums2[nums2.length/2-1])+nums2[nums2.length/2]) / 2;\n            } else {\n                return nums2[nums2.length/2];\n            }\n        }\n        int index1 = nums1.length / 2;\n        int medIndex = (nums1.length + nums2.length) / 2 - 1;\n        int index2 = medIndex - index1 - 1;\n        // if total length is odd, median being the next element after the cut-point\n        // when both arrays are not empty, set initial cut-point in the middle of array1 and array2\n        // cut the arrays after the cut-point index\n        // nums1: ...[index1]|[index1+1]..., nums2: ...[index2]|[index2+1]...\n        // complete_array: ...[medIndex]|[medIndex+1]...\n        // hence each array have cut-point-index [-1] -> [length-1]\n\n        while(true) {\n            if(index1<nums1.length-1  && index1>=0) {\n                // If there are four numbers around cut-points\n                if(nums1[index1] <= nums2[index2+1] && nums1[index1+1] >= nums2[index2]) {\n                    // If it is the true cut-point\n                    // System.out.println(\"If it is the true cut-point\");\n                    // System.out.println(\"index1: \" + index1 + \" index2: \" + index2 + \" medIndex: \" + medIndex);\n                    if((nums1.length+nums2.length)%2==0){\n                        // If it is the true cut for a even total array\n                        return ((double) (Math.max(nums1[index1], nums2[index2]) + Math.min(nums1[index1 + 1], nums2[index2 + 1]))) / 2;\n                    } else {\n                        return Math.min(nums1[index1+1], nums2[index2+1]);\n                    }\n                }\n                if(nums1[index1] > nums2[index2+1]) { // ind1 too large, go left\n                        end1 = index1 - 1;\n                } else { // ind1 too small,  go right\n                        start1 = index1 + 1;\n                }\n                index1 = (start1 + end1) / 2;\n                index2 = medIndex - index1 - 1;\n            } else if(index1==nums1.length-1 && index2<nums2.length-1 && index2>=0) {\n                // index1 at the right-most, index2 in the middle\n                // it has to be the true cut // OR NOT\n                if(nums1[index1] <= nums2[index2+1]) { // If it is the true cut\n                    // System.out.println(\"index1 at the right-most, index2 in the middle\");\n                    // System.out.println(\"index1: \" + index1 + \" index2: \" + index2 + \" medIndex: \" + medIndex);\n                    if ((nums1.length + nums2.length) % 2 == 0) {\n                        // If it is the true cut for a even total array\n                        return ((double) (Math.max(nums1[index1], nums2[index2]) + nums2[index2 + 1])) / 2;\n                    } else {\n                        return nums2[index2 + 1];\n                    }\n                } else { // it is not the true cut, move index1 left\n                    end1 = index1 - 1;\n                    index1 = (start1 + end1) / 2;\n                    index2 = medIndex - index1 - 1;\n                }\n            } else if(index1==-1 && index2<nums2.length-1 && index2>=0) {\n                // index1 at the left-most, index2 in the middle\n                // it has to be the true cut // OR NOT\n                if(nums1[0] >= nums2[index2]){\n                    // System.out.println(\"index1 at the left-most, index2 in the middle\");\n                    // System.out.println(\"index1: \" + index1 + \" index2: \" + index2 + \" medIndex: \" + medIndex);\n                    if ((nums1.length + nums2.length) % 2 == 0) {\n                        // If it is the true cut for a even total array\n                        return ((double) (nums2[index2] + Math.min(nums1[index1 + 1], nums2[index2 + 1]))) / 2;\n                    } else {\n                        return Math.min(nums1[index1 + 1], nums2[index2 + 1]);\n                    }\n                } else { // it is not the true cut, move index1 right\n                    start1 = index1 + 1;\n                    index1 = (start1 + end1) / 2;\n                    index2 = medIndex - index1 - 1;\n                }\n\n            } else if(index1==nums1.length-1 && index2 == -1) {\n                // index1 at the right-most, index2 at the left-most\n                if(nums1[index1] <= nums2[0]){\n                    // System.out.println(\"index1 at the right-most, index2 at the left-most\");\n                    // System.out.println(\"index1: \" + index1 + \" index2: \" + index2 + \" medIndex: \" + medIndex);\n                    if ((nums1.length + nums2.length) % 2 == 0) {\n                        // If it is the true cut for a even total array\n                        return ((double) (nums1[nums1.length - 1]) + nums2[0]) / 2;\n                    } else {\n                        return nums2[0];\n                    }\n                } else { // it is not the true cut, move index1 left\n                    end1 = index1 - 1;\n                    index1 = (start1 + end1) / 2;\n                    index2 = medIndex - index1 - 1;\n                }\n            } else if(index1==-1 && index2 == nums2.length-1) {\n                // index1 at the left-most, index2 at the right-most\n                if(nums2[index2] <= nums1[0]){\n                    // System.out.println(\" index1 at the left-most, index2 at the right-most\");\n                    // System.out.println(\"index1: \" + index1 + \" index2: \" + index2 + \" medIndex: \" + medIndex);\n                    if ((nums1.length + nums2.length) % 2 == 0) {\n                        // If it is the true cut for a even total array\n                        return ((double) (nums2[nums2.length - 1]) + nums1[0]) / 2;\n                    } else {\n                        return nums1[0];\n                    }\n                } else { // it is not the true cut, move index1 right\n                    start1 = index1 + 1;\n                    index1 = (start1 + end1) / 2;\n                    index2 = medIndex - index1 - 1;\n                }\n            }\n            // since nums1 is shorter than nums2, there won't be a time when index2 is at edge while index1 still in middle\n        }\n    }\n}","compare_resulttitle_slug":"median-of-two-sorted-arrays"}