{"id":280129694,"lang":"python3","time":"1 year, 8 months","timestamp":1574179879,"status_display":"Accepted","runtime":"3084 ms","url":"/submissions/detail/280129694/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"20.3 MB","code":"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n\n        if s == '' or len(set(list(s))) == 1:\n            return s\n        \n        \n        matrix = [[0]* len(s) for _ in range(len(s))]\n        for i in range(len(s)):\n            matrix[i][i] = 1\n        ms = s[0]\n        for i in range(len(s)-1):\n            if s[i] == s[i+1]:\n                matrix[i][i+1] = 1\n                ms = s[i:i+2]\n                \n        # print(matrix)\n        for i in range(3, len(s)+1):  # len of palindrome checking currently \n            for j in range(len(s) - i +1):\n                if s[j] == s[j+i-1] and matrix[j+1][j+i-2] == 1:\n                    matrix[j][j+i-1] = 1\n                    ms = s[j:j+i]\n                    # print(ms)\n                else:\n                    matrix[j][j+i-1] = 0\n       \n        return ms\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-substring"}