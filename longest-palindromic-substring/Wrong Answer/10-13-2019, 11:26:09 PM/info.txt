{"id":269689483,"lang":"python3","time":"1 year, 9 months","timestamp":1571023569,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/269689483/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        n = len(s)\n        r = []\n        for i in range(n):\n            r.append([0]*n)\n        if n == 1:\n            return s\n        if n == 2:\n            if s[0] == s[1]:\n                return s\n            else:\n                return s[0]\n        else:\n            for i in range(n):\n                r[i][i] = 1\n            a = s[i]\n            for i in range(n-1):\n                if s[i] == s[i+1]:\n                    r[i][i+1] = 2\n                    a = s[i-1:i+1]\n                else:\n                    r[i][i+1] = 1\n            for l in range(3, n+1):\n                for i in range(n-l+1):\n                    if s[i] == s[i+l-1] and r[i+1] [i+l-2] == l-2:\n                        r[i][i+l-1] = l\n                        a = s[i-1:i+l-1]\n                    else:\n                        r[i] [i+l-1] = max(r[i][i+l-2], r[i+1][i+l-1])\n            return a\n                \n            ","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-substring"}