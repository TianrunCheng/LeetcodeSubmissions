{"id":522677701,"lang":"python3","time":"1Â week","timestamp":1626307112,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/522677701/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"N/A","code":"class Solution:\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        \n        # iterative, as traversing the array:\n        # use stack to remember each height's earliest start point\n        # when pop stack, calculate all max rectangles ending in current index\n        # heights.append(0)\n        # add a sentinel, so that after the last height, we will do a round of pop\n        stack = [(heights[0], 0)]\n        # (current_heights_not_ending, earliest_start_ind)\n        large = 0\n        curr_ind = 1\n        while curr_ind < len(heights):\n            print(stack)\n            curr_h = heights[curr_ind]\n            if curr_h > stack[-1][0]:\n                stack.append((curr_h, curr_ind))\n                curr_ind += 1\n            if curr_h == stack[-1][0]:\n                curr_ind += 1\n            else:\n                # curr_h < stack[-1][0], start calculating\n                while stack and stack[-1][0] > curr_h:\n                    early_h, early_ind = stack.pop()\n                    area = early_h * (curr_ind - early_ind)\n                    if large < area:\n                        large = area\n                if not stack:\n                    # curr is the min so far\n                    stack.append((curr_h, 0))\n                if stack[-1][0] < curr_h:\n                    stack.append((curr_h, early_ind))\n                curr_ind += 1\n            \n        curr_h, curr_ind = 0, len(heights)\n        while stack and stack[-1][0] > curr_h:\n            early_h, early_ind = stack.pop()\n            area = early_h * (curr_ind - early_ind)\n            if large < area:\n                large = area\n        \n        return large\n        \n        # # worst case O(n ^ 2)\n#         # devide and conquer: devide from the minimum of array\n\n#         def helper(start: int, end: int) -> int:\n#             # area of the largest rectangle in [start, end + 1]\n#             if start > end:\n#                 return 0\n#             if start == end:\n#                 return heights[start]\n#             div = (end - start) // 2 + start\n#             for i in range(start, end + 1):\n#                 if heights[i] < heights[div]:\n#                     div = i\n#             return max((end - start + 1) * heights[div], helper(start, div-1), helper(div+1, end))\n        \n#         return helper(0, len(heights)-1)","compare_result":"111111111111011110111000001000101100111100001110010101101010000000110000100010100000010101010100","title_slug":"largest-rectangle-in-histogram"}