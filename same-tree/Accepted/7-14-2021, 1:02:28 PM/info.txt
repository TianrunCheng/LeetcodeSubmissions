{"id":522532210,"lang":"python3","time":"1Â week","timestamp":1626282148,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/522532210/","is_pending":"Not Pending","title":"Same Tree","memory":"14.3 MB","code":"from collections import deque\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        \n        # iterative approach, Breadth First Search\n        def sameNode(p: TreeNode, q: TreeNode) -> bool:\n            if not p and not q:\n                return True\n            if not p or not q:\n                return False\n            if p.val != q.val:\n                return False\n            return True\n        \n        dq = deque()\n        dq.append((p, q))\n        while(len(dq) > 0):\n            curr_p, curr_q = dq.popleft()\n            if not sameNode(curr_p, curr_q):\n                return False\n            if curr_p:\n                dq.append((curr_p.left, curr_q.left))\n                dq.append((curr_p.right, curr_q.right))\n        return True\n        \n        \n        \n        \n        \n#         # recursive approach\n#         if not p and not q:\n#             return True\n#         if not p or not q:\n#             return False\n#         if p.val != q.val:\n#             return False\n#         return self.isSameTree(p.left, q. left) and self.isSameTree(p.right, q.right)","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"same-tree"}