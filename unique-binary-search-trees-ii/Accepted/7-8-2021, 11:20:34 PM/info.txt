{"id":519590612,"lang":"python3","time":"1 week, 5 days","timestamp":1625800834,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/519590612/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"15.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:\n        \n        def build(start: int, end: int):\n            # a generator of all binary trees storing vals between [start: end]\n            \n            if start > end:\n                # yield None\n                return [None]\n            \n            res = []\n            for i in range(start, end+1):\n                # left tree [start, i-1], right tree [i+1, end]\n                left = build(start, i-1)\n                right = build(i+1, end)\n                for l in left:\n                    # print(l)\n                    for r in right:\n                        # print(r)\n                        temp = TreeNode(i)\n                        temp.left = l\n                        temp.right = r\n                        # yield temp\n                        res.append(temp)\n            return res\n        \n#         res = []\n#         iter_obj = build(1, n)\n        \n#         for ele in iter_obj:\n#             res.append(ele)\n        \n        # return res\n        return build(1, n)","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii"}