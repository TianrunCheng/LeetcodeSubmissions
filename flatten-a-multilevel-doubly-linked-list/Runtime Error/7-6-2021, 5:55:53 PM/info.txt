{"id":518458932,"lang":"python3","time":"2 weeks, 1 day","timestamp":1625608553,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/518458932/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"N/A","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution:\n    def flatten(self, head: 'Node') -> 'Node':\n        if head == None:\n            return head\n        \n        curr = head\n        \n        def recur(head: 'Node') -> 'Node':\n            # flatten double link list starting from head\n            # return tail of flattened list\n            curr = head\n            while curr.next or curr.child:\n                if curr.child:\n                    tail = recur(curr.child)\n                    # weave curr.child - ... - tail after curr into list\n                    curr.next.prev = tail\n                    tail.next = curr.next\n                    curr.next = curr.child\n                    curr.child.prev = curr\n                    curr.child = None\n                    curr = tail\n                if curr.next:\n                    curr = curr.next\n            return curr\n        \n        recur(curr)\n        \n        return head","compare_result":"11111110000000000000000000","title_slug":"flatten-a-multilevel-doubly-linked-list"}