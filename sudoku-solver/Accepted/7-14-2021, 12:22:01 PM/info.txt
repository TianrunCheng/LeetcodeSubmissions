{"id":522514982,"lang":"python3","time":"1Â week","timestamp":1626279721,"status_display":"Accepted","runtime":"1028 ms","url":"/submissions/detail/522514982/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"14.5 MB","code":"class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        \"\"\"\n        Do not return anything, modify board in-place instead.\n        \"\"\"\n        self.found = False\n        self.res = []\n        \n        def isValid(val: str, x: int, y: int) -> bool:\n            # is val valid to fill in (x, y) at the time being?\n            box_x = (x // 3) * 3\n            box_y = (y // 3) * 3\n            for i in range(3):\n                for j in range(3):\n                    if (box_x + i, box_y + j) != (x, y):\n                        if board[box_x + i][box_y + j] == val:\n                            return False\n            for i in range(9):\n                if i != x:\n                    if board[i][y] == val:\n                        return False\n            for j in range(9):\n                if j != y:\n                    if board[x][j] == val:\n                        return False\n            return True\n        \n        def nextCell(x: int, y: int) -> (int, int):\n            serial = x * 9 + y + 1\n            while(serial < 81):\n                i = serial // 9\n                j = serial - i * 9\n                if board[i][j] == \".\":\n                    return (i, j)\n                serial += 1\n            return (-1, -1)\n        \n        def recur(x: int, y: int):\n            # try all possible digits in (x, y)\n            # then fill the cells after this one\n            # print((x, y))\n            for i in range(1, 10):\n                val = str(i)\n                if isValid(val, x, y):\n                    board[x][y] = val\n                    next_x, next_y = nextCell(x, y)\n                    if next_x < 0:\n                        self.found = True\n                        # print(board)\n                        # self.res = board.copy()\n                        # print(self.res)\n                        return\n                    else:\n                        recur(next_x, next_y)\n                        if not self.found:\n                            board[x][y] = \".\"\n            return\n        \n        if board[0][0] != \".\":\n            x, y = nextCell(0, 0)\n            recur(x, y)\n        else:\n            recur(0, 0)\n        \n        # board = self.res.copy()\n        return\n                    \n            \n            ","compare_result":"111111","title_slug":"sudoku-solver"}