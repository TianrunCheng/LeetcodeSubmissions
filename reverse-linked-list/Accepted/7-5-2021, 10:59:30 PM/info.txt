{"id":518032986,"lang":"python3","time":"2 weeks, 1 day","timestamp":1625540370,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/518032986/","is_pending":"Not Pending","title":"Reverse Linked List","memory":"15.6 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        \n        prev_node = None\n        curr_node = head\n        while curr_node:\n            next_node = curr_node.next # Remember next node\n            curr_node.next = prev_node  # REVERSE! None, first time round.\n            prev_node = curr_node  # Used in the next iteration.\n            curr_node = next_node  # Move to next node.\n        head = prev_node\n        return head\n\n        \n#         # recursive: O(n^2)\n#         if head == None or head.next == None:\n#             return head\n        \n#         curr = self.reverseList(head.next)\n        \n#         head.next.next = head\n#         head.next = None\n        \n#         return curr\n        \n        \n        \n#         # recursive: traversing the entire returned list to find\n#         #  the last place to add the excepted node, O(n^2)\n#         if head == None or head.next == None:\n#             return head\n#         curr = head\n#         # exclude the first element, recursively solve start from head.next\n#         head = self.reverseList(head.next)\n#         tail = head\n#         while(tail.next != None):\n#             tail = tail.next\n#         tail.next = curr\n#         curr.next = None\n#         # curr's next has not been changed in the recursive function!\n#         # it's pointing to the tail of the returned list!\n#         return head\n        \n#         if head == None:\n#             return None\n        \n#         tail = head\n#         while(tail.next != None):\n#             curr = tail.next\n#             tail.next = tail.next.next\n#             curr.next = head\n#             head = curr\n        \n#         return head","compare_result":"1111111111111111111111111111","title_slug":"reverse-linked-list"}