{"id":521521041,"lang":"python3","time":"1 week, 2 days","timestamp":1626123319,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/521521041/","is_pending":"Not Pending","title":"N-Queens II","memory":"14.4 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        self.queens = [-1] * n\n        self.count = 0\n        \n        def is_not_under_attack(row, col):\n            for i in range(n):\n                # queen in row: i, col: queens[i]\n                if self.queens[i] < 0:\n                    continue\n                else:\n                    if row == i or  col == self.queens[i]:\n                        return False\n                    if abs(row - i) == abs(col - self.queens[i]):\n                        return False\n            return True\n        \n        def place_queen(row, col):\n            self.queens[row] = col\n        \n        def remove_queen(row, col):\n            self.queens[row] = -1\n        \n        def backtrack(row = 0):\n            # explore after the branches of a certain row\n            # given the trace of rows before\n            for col in range(n):\n                if is_not_under_attack(row, col):\n                    place_queen(row, col)\n                    if row + 1 == n:\n                        self.count += 1\n                    else:\n                        backtrack(row + 1)\n                    remove_queen(row, col)\n        \n        backtrack()\n        return self.count\n            ","compare_result":"111111111","title_slug":"n-queens-ii"}