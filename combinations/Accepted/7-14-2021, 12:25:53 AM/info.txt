{"id":522246606,"lang":"python3","time":"1Â week","timestamp":1626236753,"status_display":"Accepted","runtime":"456 ms","url":"/submissions/detail/522246606/","is_pending":"Not Pending","title":"Combinations","memory":"15.8 MB","code":"class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        def backtrack(first = 1, curr = []):\n            # if the combination is done\n            if len(curr) == k:  \n                output.append(curr[:])\n            for i in range(first, n + 1):\n                # add i into the current combination\n                curr.append(i)\n                # use next integers to complete the combination\n                backtrack(i + 1, curr)\n                # backtrack\n                curr.pop()\n        \n        output = []\n        backtrack()\n        return output\n\n\n\n# class Solution:\n#     def combine(self, n: int, k: int) -> List[List[int]]:\n#         res = []\n#         def recur(n: int, k: int) -> List[List[int]]:\n#             # generator of all combinations (1, ..., n) choose k\n#             # print(\"generate n = \" + str(n) + \", k = \" + str(k))\n#             if n == k:\n#                 res = []\n#                 for i in range(1, n + 1):\n#                     res.append(i)\n#                 return [res]\n            \n#             if k == 1:\n#                 res = []\n#                 for i in range(1, n + 1):\n#                     res.append([i])\n#                 return res\n            \n#             n -= 1\n#             k -= 1\n#             res = []\n#             for i in range(k, n + 1):\n#                 sub = recur(i, k)\n#                 for lis in sub:\n#                     lis.append(i+1)\n#                     res.append(lis)\n#             return res\n        \n#         # for lis in recur(n, k):\n#         #     print(lis)\n#         #     res.append(lis)\n#         return recur(n, k)\n                    ","compare_result":"111111111111111111111111111","title_slug":"combinations"}