{"id":522247174,"lang":"python3","time":"1Â week","timestamp":1626236830,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/522247174/","is_pending":"Not Pending","title":"Combinations","memory":"15.7 MB","code":"class Solution:\n    def combine(self, n: int, k: int) -> List[List[int]]:\n        # init first combination\n        nums = list(range(1, k + 1)) + [n + 1]\n        \n        output, j = [], 0\n        while j < k:\n            # add current combination\n            output.append(nums[:k])\n            # increase first nums[j] by one\n            # if nums[j] + 1 != nums[j + 1]\n            j = 0\n            while j < k and nums[j + 1] == nums[j] + 1:\n                nums[j] = j + 1\n                j += 1\n            nums[j] += 1\n            \n        return output\n\n\n\n# class Solution:\n#     def combine(self, n: int, k: int) -> List[List[int]]:\n#         res = []\n#         def recur(n: int, k: int) -> List[List[int]]:\n#             # generator of all combinations (1, ..., n) choose k\n#             # print(\"generate n = \" + str(n) + \", k = \" + str(k))\n#             if n == k:\n#                 res = []\n#                 for i in range(1, n + 1):\n#                     res.append(i)\n#                 return [res]\n            \n#             if k == 1:\n#                 res = []\n#                 for i in range(1, n + 1):\n#                     res.append([i])\n#                 return res\n            \n#             n -= 1\n#             k -= 1\n#             res = []\n#             for i in range(k, n + 1):\n#                 sub = recur(i, k)\n#                 for lis in sub:\n#                     lis.append(i+1)\n#                     res.append(lis)\n#             return res\n        \n#         # for lis in recur(n, k):\n#         #     print(lis)\n#         #     res.append(lis)\n#         return recur(n, k)\n                    ","compare_result":"111111111111111111111111111","title_slug":"combinations"}