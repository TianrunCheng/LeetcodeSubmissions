{"id":516013449,"lang":"python3","time":"2 weeks, 6 days","timestamp":1625171159,"status_display":"Accepted","runtime":"588 ms","url":"/submissions/detail/516013449/","is_pending":"Not Pending","title":"01 Matrix","memory":"16.5 MB","code":"from collections import deque\n\nclass Solution:\n    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:\n        bfs = deque()\n        \n        m = len(mat)\n        n = len(mat[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if mat[i][j] == 0:\n                    bfs.append((i, j))\n                else:\n                    mat[i][j] = float(\"inf\")\n        \n        step = 0\n        while(len(bfs) > 0):\n            size = len(bfs)\n            step += 1\n            for _ in range(size):\n                cur = bfs.popleft()\n                if cur[0] > 0 and mat[cur[0] - 1][cur[1]] > step:\n                    mat[cur[0] - 1][cur[1]] = step\n                    bfs.append((cur[0]-1, cur[1]))\n                if cur[0] < (m - 1) and mat[cur[0] + 1][cur[1]] > step:\n                    mat[cur[0] + 1][cur[1]] = step\n                    bfs.append((cur[0]+1, cur[1]))\n                if cur[1] > 0 and mat[cur[0]][cur[1] - 1] > step:\n                    mat[cur[0]][cur[1] - 1] = step\n                    bfs.append((cur[0], cur[1]-1))\n                if cur[1] < (n - 1) and mat[cur[0]][cur[1] + 1] > step:\n                    mat[cur[0]][cur[1] + 1] = step\n                    bfs.append((cur[0], cur[1]+1))\n        return mat\n        \n        ","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"01-matrix"}