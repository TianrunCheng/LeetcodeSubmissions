{"id":519982472,"lang":"python3","time":"1 week, 5 days","timestamp":1625865325,"status_display":"Accepted","runtime":"816 ms","url":"/submissions/detail/519982472/","is_pending":"Not Pending","title":"Sort an Array","memory":"21.5 MB","code":"class Solution:\n    \n    # implement bottom-up solution\n    def sortArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        size = 1\n        while size < n:\n            # this loop we make sure every [0: 2*size], [2*size: 4*size], ...\n            # are sorted\n            # print(size)\n            for cursor in range(0, n, 2 * size):\n                if cursor + size < n:\n                    nums[cursor: min(cursor + 2 * size, n)] = self.merge(nums[cursor: cursor + size], nums[cursor + size: min(cursor + 2 * size, n)])\n                # print(cursor)\n                # print(nums)\n            size = size * 2\n        return nums\n        \n        \n    def merge(self, left, right):\n        res = []\n        left_cursor = right_cursor = 0\n        \n        while left_cursor < len(left) and right_cursor < len(right):\n            if left[left_cursor] > right[right_cursor]:\n                res.append(right[right_cursor])\n                right_cursor += 1\n            else:\n                res.append(left[left_cursor])\n                left_cursor += 1\n                \n        res.extend(right[right_cursor:])\n        res.extend(left[left_cursor:])\n        return res\n        \n    \n#     # rewrite top-down solution    \n#     def sortArray(self, nums: List[int]) -> List[int]:\n#         n = len(nums)\n#         if len(nums) < 2:\n#             return nums\n#         left = self.sortArray(nums[:(n // 2)])\n#         right = self.sortArray(nums[(n // 2):])\n#         return self.merge(left, right)","compare_result":"1111111111111","title_slug":"sort-an-array"}