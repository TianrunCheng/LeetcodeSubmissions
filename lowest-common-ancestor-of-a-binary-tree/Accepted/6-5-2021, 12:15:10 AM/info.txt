{"id":503185304,"lang":"python3","time":"1 month, 2 weeks","timestamp":1622866510,"status_display":"Accepted","runtime":"112 ms","url":"/submissions/detail/503185304/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"29.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        \n        def printTrace(trace: ['TreeNode']):\n            res = []\n            for node in trace:\n                res.append(node.val)\n            print(res)\n\n        trace = []\n        \n        p_trace = []\n        q_trace = []\n        \n        def find(root: 'TreeNode'):\n            if root == None:\n                return\n            trace.append(root)\n            if root == p:\n                for x in trace:\n                    p_trace.append(x)\n            if root == q:\n                for x in trace:\n                    q_trace.append(x)\n            find(root.left)\n            find(root.right)\n            trace.pop(-1)\n            return\n\n        \n        find(root)\n\n        \n        # printTrace(p_trace)\n        # printTrace(q_trace)\n        i = 0\n        ml = min(len(p_trace), len(q_trace))\n        while(i < ml and p_trace[i] == q_trace[i]):\n            i += 1 \n        \n        print(i)\n        return p_trace[i-1]\n            \n            \n            ","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}