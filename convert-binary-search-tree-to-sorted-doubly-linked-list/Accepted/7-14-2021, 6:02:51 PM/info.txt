{"id":522645815,"lang":"python3","time":"1Â week","timestamp":1626300171,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/522645815/","is_pending":"Not Pending","title":"Convert Binary Search Tree to Sorted Doubly Linked List","memory":"15.6 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\"\"\"\n\nclass Solution:\n    def treeToDoublyList(self, root: 'Node') -> 'Node':\n        # if we're allowed to use O(n) extra space, \n        # we could store the tree nodes in a dictionary\n        # for they all have diff vals. then link them accordingly\n        if not root:\n            return root\n        \n        # if we don't use linear extra space: recursion?\n        def recur(root: 'Node') -> ('Node', 'Node'):\n            # rebuild the BST of root to a doubly linked list in place\n            # return the [head, tail] of the rebuilt list\n            \n            if root.left:\n                l_head, l_tail = recur(root.left)\n                head = l_head\n                l_tail.right = root\n                root.left = l_tail\n            else:\n                head = root\n                \n            if root.right:\n                r_head, r_tail = recur(root.right)\n                tail = r_tail\n                r_head.left = root\n                root.right = r_head\n            else:\n                tail = root\n            \n            return (head, tail)\n        \n        head, tail = recur(root)\n        head.left = tail\n        tail.right = head\n        return head","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"convert-binary-search-tree-to-sorted-doubly-linked-list"}