{"id":519043628,"lang":"python3","time":"2Â weeks","timestamp":1625711158,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/519043628/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"15.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        \n#         # https://www.geeksforgeeks.org/global-keyword-in-python/\n#         # global variable in nested functions\n\n#         global ans\n#         # claim a global variable\n#         ans = 0\n        \n#         # pass on the depth of the current node\n#         def topDown(node: TreeNode, depth: int):\n#             global ans\n#             # referring a global variable\n#             if node == None:\n#                 return\n#             if node.left == None and node.right == None:\n#                 if ans < depth:\n#                     ans = depth\n#                 return\n#             topDown(node.left, depth+1)\n#             topDown(node.right, depth+1)\n        \n#         topDown(root, 1)\n        \n#         return ans\n\n\n#         # bottom-up recursive func\n#         if root == None:\n#             return 0\n#         l = self.maxDepth(root.left)\n#         r = self.maxDepth(root.right)\n#         return max(l, r) + 1\n\n        # iterative solution\n        ans = 0\n        stack = []\n        \n        if root == None:\n            return 0\n        \n        root.val = 1\n        stack.append(root)\n        \n        \n        while(len(stack) > 0):\n            node = stack.pop(-1)\n            level = node.val\n            if node.left == None and node.right == None:\n                ans = max(level, ans)\n            if node.right != None:\n                node.right.val = level + 1\n                stack.append(node.right)\n            if node.left != None:\n                node.left.val = level + 1\n                stack.append(node.left)\n        \n        return ans\n\n            \n\n\n\n\n#         # avoid using global variable, pass on the val of global each time\n\n#         def topDown(node: TreeNode, depth: int, ans: int) -> int:\n\n#             if node == None:\n#                 return ans\n#             if node.left == None and node.right == None:\n#                 if ans < depth:\n#                     ans = depth\n#                 return ans\n#             l_ans = topDown(node.left, depth + 1, ans)\n#             r_ans = topDown(node.right, depth + 1, ans)\n#             ans = max(ans, l_ans, r_ans)\n#             return ans\n        \n#         ans = topDown(root, 1, 0)\n        \n#         return ans\n\n","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree"}