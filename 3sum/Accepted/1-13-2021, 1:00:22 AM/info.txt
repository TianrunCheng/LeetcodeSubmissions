{"id":442347030,"lang":"python3","time":"6 months, 1 week","timestamp":1610517622,"status_display":"Accepted","runtime":"7640 ms","url":"/submissions/detail/442347030/","is_pending":"Not Pending","title":"3Sum","memory":"18.1 MB","code":"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \n        # len(nums) <= 3000, somehow allows n^2 complexity\n        # nums[i] would not exceed python int arrange: 4 bytes -> 2^32 -> 10^9\n        \n        result = []\n        if len(nums) < 3:\n            return result\n        \n        nums.sort()\n        # print(nums)\n        # def binary_search(start, key) -> bool:\n        #     # print(lookup)\n        #     # print(key)\n        #     lo = start\n        #     hi = len(nums) - 1\n        #     while(lo <= hi):\n        #         mid = lo + (hi - lo) // 2\n        #         if key < nums[mid]:\n        #             hi = mid - 1\n        #         elif key > nums[mid]:\n        #             lo = mid + 1\n        #         else:\n        #             return True\n        #     return False\n        \n        \n        for i in  range(len(nums)-2):\n            if i > 0 and nums[i]==nums[i-1]:\n                continue\n            curr_result = []\n            for j in range(i+1, len(nums)-1):\n                if j > (i+1) and nums[j]==nums[j-1]:\n                    continue\n                curr_sum = nums[i] + nums[j]\n                key = -curr_sum\n                lo = j+1\n                hi = len(nums) - 1\n                flag = False\n                while(lo <= hi):\n                    mid = lo + (hi - lo) // 2\n                    if key < nums[mid]: \n                        hi = mid - 1\n                    elif key > nums[mid]: \n                        lo = mid + 1\n                    else: \n                        flag = True\n                        lo = hi + 1\n                if flag:\n                    curr_result = [nums[i], nums[j], -curr_sum]\n                    result.append(curr_result)\n        \n        return result\n\n                ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum"}