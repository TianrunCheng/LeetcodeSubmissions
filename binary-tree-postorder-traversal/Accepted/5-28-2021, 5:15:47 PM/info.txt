{"id":499593439,"lang":"python3","time":"1 month, 3 weeks","timestamp":1622236547,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/499593439/","is_pending":"Not Pending","title":"Binary Tree Postorder Traversal","memory":"14.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nclass Solution:\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        \n        # iterative solution:\n        \n        res = []\n        s1 = []\n        # the \"to-do-list\"\n        s2 = []\n        # when we meet a node with branches attached\n        # if it \"has been\" under other elements in s1, \n        # we only output its value (its left and right outputted)\n        \n        if root == None:\n            return res\n        \n        s1.append(root)\n        \n        while(len(s1) > 0):\n            curr = s1[-1]\n            if len(s2) > 0 and s2[-1] == curr:\n                res.append(curr.val)\n                s1.pop(-1)\n                s2.pop(-1)\n            else:\n                flag = False\n                if curr.right != None:\n                    s1.append(curr.right)\n                    flag = True\n                if curr.left != None:\n                    s1.append(curr.left)\n                    flag = True\n                if flag:\n                    s2.append(curr)\n                else:\n                    res.append(curr.val)\n                    s1.pop(-1)\n                    \n        return res\n        \n        \n        \n        \n        \n        \n        \n                \n# recursive solution:\n\n#         res = []\n        \n#         def postorder(node: TreeNode):\n#             if node == None:\n#                 return\n#             postorder(node.left)\n#             postorder(node.right)\n#             res.append(node.val)\n            \n#         postorder(root)\n        \n#         return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-postorder-traversal"}