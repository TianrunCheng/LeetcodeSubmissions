{"id":500542815,"lang":"python3","time":"1 month, 3 weeks","timestamp":1622407628,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/500542815/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"14.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        \n#         def symTree(tree1: TreeNode, tree2: TreeNode) -> bool:\n#             if tree1 == None and tree2 == None:\n#                 return True\n#             elif tree2 == None or tree1 == None:\n#                 return False\n#             else:\n#                 if tree1.val == tree2.val:\n#                     return symTree(tree1.left, tree2.right) and symTree(tree1.right, tree2.left)\n#                 else:\n#                     return False\n        \n#         if root == None:\n#             return True\n        \n#         return symTree(root.left, root.right)\n        \n        # iterative solution\n        # left traverse left subtree == right traverse right subtree?\n        # will not work. \n        # use level first traversal\n        if root == None:\n            return True\n        lq = []\n        rq = []\n        lq.append(root.left)\n        rq.append(root.right)\n\n\n        while(len(lq) > 0):\n            if len(rq) == 0:\n                return False\n            lnode = lq.pop(-1)\n            rnode = rq.pop(-1)\n            \n            if lnode == None and rnode == None:\n                continue\n            if lnode == None or rnode == None:\n                return False\n            if lnode.val == rnode.val:\n                lq.append(lnode.left)\n                lq.append(lnode.right)\n                rq.append(rnode.right)\n                rq.append(rnode.left)\n            else:\n                return False\n        \n        if len(rq) == 0:\n            return True\n        \n        return False\n        \n        \n        \n        \n\n    \n    \n    ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree"}