{"id":499197432,"lang":"python3","time":"1 month, 3 weeks","timestamp":1622158177,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/499197432/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"14.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        # iterative approach\n        stack = []\n        \n        res = []\n        \n#         if root == None:\n#             return res\n        \n#         flag = False\n        curr = root\n        \n        while(curr != None or len(stack) > 0):\n            # print(curr.val)\n            # print(stack)\n            if curr == None:\n                curr = stack.pop(-1)\n                res.append(curr.val)\n                curr = curr.right\n            \n            else:\n                if curr.left != None:\n                    stack.append(curr)\n                    curr = curr.left\n                else:\n                    res.append(curr.val)\n                    curr = curr.right\n\n        \n        return res\n        \n        \n        \n# recursive solution:\n\n#         res = []\n        \n#         def inorder(node: TreeNode):\n#             if node == None:\n#                 return\n#             inorder(node.left)\n#             res.append(node.val)\n#             inorder(node.right)\n        \n#         inorder(root)\n        \n#         return res\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal"}