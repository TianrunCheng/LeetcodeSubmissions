{"id":510354908,"lang":"python3","time":"1Â month","timestamp":1624147653,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/510354908/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"N/A","code":"class Solution:\n    def minWindow(self, s: str, t: str) -> str:\n        m = len(s)\n        n = len(t)\n        dic = {}\n        # {\n        #   key: value\n        # }\n        # key: char; value: num of appearance in t\n        for c in t:\n            if c not in dic:\n                dic[c] = 1\n            else:\n                dic[c] += 1\n        \n        # print(dic)\n        \n\n        left = 0\n        right = 0\n        s = list(s)\n        # current_substring = s[left, right]\n        # current_substring=\"\"\n        # current_dic={}\n        hit_dic = {}\n        # if s[0] in dic:\n        #     hit_dic[s[0]] = 1\n        # if t == s[0]:\n        #     return s[0]\n        \n        flag = False\n        min_length = m\n        res = \"\"\n        # current_length=n\n        # optimal_substring=\"\"\n        \n        while( right < m ):\n            # print(\"left: \" + str(left) + \"  right: \" + str(right))\n            # print(flag)\n            # print(hit_dic)\n\n            if not flag:  # s[left, right] doesn't include t, growing phase\n                curr = s[right]\n                if curr in dic:\n                    if curr not in hit_dic:\n                        hit_dic[curr] = 1\n                    else:\n                        hit_dic[curr] += 1\n                    state = True\n                    for c in dic:\n                        if c not in hit_dic:\n                            state = False\n                            break\n                        elif hit_dic[c] < dic[c]:\n                            state = False\n                            break\n                    if state:\n                        flag = True\n                    else:\n                        right += 1\n\n                else:\n                    right += 1\n\n            else:\n                # s[left, right] includes t, dwindling phase\n                curr = s[left]\n                # print(curr)\n                if curr in dic:\n                    if hit_dic[curr] > dic[curr]:\n                        # print(hit_dic)\n                        # can afford to exclude this curr char\n                        hit_dic[curr] -= 1\n                        left += 1\n                    else:\n                        # s[left, right] is a local minWindow\n                        if (right - left + 1) < min_length:\n                            res = \"\".join(s[left:right+1])\n                            # print(res)\n                            min_length = right - left\n                        left += 1\n                        if hit_dic[curr] > 1:\n                            hit_dic[curr] -= 1\n                        else:\n                            del hit_dic[curr]\n                        flag = False\n                        right += 1\n                else:\n                    left += 1\n            \n        return res\n                \n        \n        \n\n        # while(left < (n+1)):\n        #     while(right < (n+1)):\n        #         current_c=s[right]\n        #         current_substring = current_substring + current_c\n        #         if dic[current_c] >= 1:\n        #             if current_c not in current_dic:\n        #                 current_dic[current_c]=1\n        #             else:\n        #                 current_dic[current_c]+=1\n        #         if current_dic == dic:\n        #             current_length = len(current_substring)\n        #         if current_length< min_length:\n        #             min_length=current_length\n        #             optimal_substring=current_substring\n        #         right += 1\n            \n                        \n            \n                \n          \n        \n        \n        return \"\"","compare_result":"10111111011111100110011100100111010001110110111111111111101111111111011111111101111111111111111111110111100111111110111111111111110101111101011111111101011111011111111111001111011011111011111111011111111111100011111111111111111111111111111111111111110111111110111111","title_slug":"minimum-window-substring"}