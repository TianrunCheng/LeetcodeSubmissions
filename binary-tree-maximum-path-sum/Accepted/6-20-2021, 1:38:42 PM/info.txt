{"id":510723509,"lang":"python3","time":"1Â month","timestamp":1624210722,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/510723509/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"21.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        def max_gain(node):\n            nonlocal max_sum\n            if not node:\n                return 0\n\n            # max sum on the left and right sub-trees of node\n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            # the price to start a new path where `node` is a highest node\n            price_newpath = node.val + left_gain + right_gain\n            \n            # update max_sum if it's better to start a new path\n            max_sum = max(max_sum, price_newpath)\n        \n            # for recursion :\n            # return the max gain if continue the same path\n            return node.val + max(left_gain, right_gain)\n   \n        max_sum = float('-inf')\n        max_gain(root)\n        return max_sum","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum"}