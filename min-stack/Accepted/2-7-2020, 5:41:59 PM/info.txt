{"id":301163826,"lang":"python3","time":"1 year, 5 months","timestamp":1581115319,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/301163826/","is_pending":"Not Pending","title":"Min Stack","memory":"16.5 MB","code":"class MinStack:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.stack = []\n        self.min = []\n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if len(self.min) == 0:\n            self.min.append(x)\n        else:\n            if x < self.min[-1]:\n                self.min.append(x)\n            else:\n                self.min.append(self.min[-1])\n\n    def pop(self) -> None:\n        self.stack.pop(-1)\n        self.min.pop(-1)\n\n    def top(self) -> int:\n        return self.stack[-1]\n\n    def getMin(self) -> int:\n        return self.min[-1]\n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"111111111111111111","title_slug":"min-stack"}